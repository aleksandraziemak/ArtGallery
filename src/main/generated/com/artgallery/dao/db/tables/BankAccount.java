/*
 * This file is generated by jOOQ.
 */
package com.artgallery.dao.db.tables;


import com.artgallery.dao.db.DefaultSchema;
import com.artgallery.dao.db.Keys;
import com.artgallery.dao.db.tables.records.BankAccountRecord;

import java.math.BigDecimal;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BankAccount extends TableImpl<BankAccountRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>BANK_ACCOUNT</code>
     */
    public static final BankAccount BANK_ACCOUNT = new BankAccount();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BankAccountRecord> getRecordType() {
        return BankAccountRecord.class;
    }

    /**
     * The column <code>BANK_ACCOUNT.ID</code>.
     */
    public final TableField<BankAccountRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>BANK_ACCOUNT.NAME</code>.
     */
    public final TableField<BankAccountRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>BANK_ACCOUNT.ACCOUNT_NUMBER</code>.
     */
    public final TableField<BankAccountRecord, String> ACCOUNT_NUMBER = createField(DSL.name("ACCOUNT_NUMBER"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>BANK_ACCOUNT.BALANCE</code>.
     */
    public final TableField<BankAccountRecord, BigDecimal> BALANCE = createField(DSL.name("BALANCE"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * The column <code>BANK_ACCOUNT.CURRENCY</code>.
     */
    public final TableField<BankAccountRecord, String> CURRENCY = createField(DSL.name("CURRENCY"), SQLDataType.CLOB.nullable(false), this, "");

    private BankAccount(Name alias, Table<BankAccountRecord> aliased) {
        this(alias, aliased, null);
    }

    private BankAccount(Name alias, Table<BankAccountRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>BANK_ACCOUNT</code> table reference
     */
    public BankAccount(String alias) {
        this(DSL.name(alias), BANK_ACCOUNT);
    }

    /**
     * Create an aliased <code>BANK_ACCOUNT</code> table reference
     */
    public BankAccount(Name alias) {
        this(alias, BANK_ACCOUNT);
    }

    /**
     * Create a <code>BANK_ACCOUNT</code> table reference
     */
    public BankAccount() {
        this(DSL.name("BANK_ACCOUNT"), null);
    }

    public <O extends Record> BankAccount(Table<O> child, ForeignKey<O, BankAccountRecord> key) {
        super(child, key, BANK_ACCOUNT);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<BankAccountRecord, Long> getIdentity() {
        return (Identity<BankAccountRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<BankAccountRecord> getPrimaryKey() {
        return Keys.PK_BANK_ACCOUNT;
    }

    @Override
    public BankAccount as(String alias) {
        return new BankAccount(DSL.name(alias), this);
    }

    @Override
    public BankAccount as(Name alias) {
        return new BankAccount(alias, this);
    }

    @Override
    public BankAccount as(Table<?> alias) {
        return new BankAccount(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public BankAccount rename(String name) {
        return new BankAccount(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankAccount rename(Name name) {
        return new BankAccount(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public BankAccount rename(Table<?> name) {
        return new BankAccount(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, String, BigDecimal, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super String, ? super String, ? super BigDecimal, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super String, ? super String, ? super BigDecimal, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
