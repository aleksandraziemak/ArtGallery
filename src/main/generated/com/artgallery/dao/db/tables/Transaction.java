/*
 * This file is generated by jOOQ.
 */
package com.artgallery.dao.db.tables;


import com.artgallery.dao.db.DefaultSchema;
import com.artgallery.dao.db.Keys;
import com.artgallery.dao.db.tables.records.TransactionRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function9;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Transaction extends TableImpl<TransactionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>TRANSACTION</code>
     */
    public static final Transaction TRANSACTION = new Transaction();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TransactionRecord> getRecordType() {
        return TransactionRecord.class;
    }

    /**
     * The column <code>TRANSACTION.ID</code>.
     */
    public final TableField<TransactionRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>TRANSACTION.PAINTING_ID</code>.
     */
    public final TableField<TransactionRecord, Long> PAINTING_ID = createField(DSL.name("PAINTING_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>TRANSACTION.CLIENT_ID</code>.
     */
    public final TableField<TransactionRecord, Long> CLIENT_ID = createField(DSL.name("CLIENT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>TRANSACTION.CURATOR_ID</code>.
     */
    public final TableField<TransactionRecord, Long> CURATOR_ID = createField(DSL.name("CURATOR_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>TRANSACTION.BANK_ACCOUNT_ID</code>.
     */
    public final TableField<TransactionRecord, Long> BANK_ACCOUNT_ID = createField(DSL.name("BANK_ACCOUNT_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>TRANSACTION.value</code>.
     */
    public final TableField<TransactionRecord, BigDecimal> VALUE = createField(DSL.name("value"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    /**
     * The column <code>TRANSACTION.DATE</code>.
     */
    public final TableField<TransactionRecord, LocalDate> DATE = createField(DSL.name("DATE"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>TRANSACTION.TYPE</code>.
     */
    public final TableField<TransactionRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>TRANSACTION.VALUE_CURRENCY</code>.
     */
    public final TableField<TransactionRecord, String> VALUE_CURRENCY = createField(DSL.name("VALUE_CURRENCY"), SQLDataType.CLOB.nullable(false), this, "");

    private Transaction(Name alias, Table<TransactionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Transaction(Name alias, Table<TransactionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>TRANSACTION</code> table reference
     */
    public Transaction(String alias) {
        this(DSL.name(alias), TRANSACTION);
    }

    /**
     * Create an aliased <code>TRANSACTION</code> table reference
     */
    public Transaction(Name alias) {
        this(alias, TRANSACTION);
    }

    /**
     * Create a <code>TRANSACTION</code> table reference
     */
    public Transaction() {
        this(DSL.name("TRANSACTION"), null);
    }

    public <O extends Record> Transaction(Table<O> child, ForeignKey<O, TransactionRecord> key) {
        super(child, key, TRANSACTION);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<TransactionRecord, Long> getIdentity() {
        return (Identity<TransactionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<TransactionRecord> getPrimaryKey() {
        return Keys.PK_TRANSACTION;
    }

    @Override
    public List<ForeignKey<TransactionRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_TRANSACTION_PAINTING, Keys.FK_TRANSACTION_CLIENT, Keys.FK_TRANSACTION_CURATOR, Keys.FK_TRANSACTION_BANK_ACCOUNT);
    }

    private transient Painting _painting;
    private transient Client _client;
    private transient Curator _curator;
    private transient BankAccount _bankAccount;

    /**
     * Get the implicit join path to the <code>PUBLIC.PAINTING</code> table.
     */
    public Painting painting() {
        if (_painting == null)
            _painting = new Painting(this, Keys.FK_TRANSACTION_PAINTING);

        return _painting;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.CLIENT</code> table.
     */
    public Client client() {
        if (_client == null)
            _client = new Client(this, Keys.FK_TRANSACTION_CLIENT);

        return _client;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.CURATOR</code> table.
     */
    public Curator curator() {
        if (_curator == null)
            _curator = new Curator(this, Keys.FK_TRANSACTION_CURATOR);

        return _curator;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.BANK_ACCOUNT</code> table.
     */
    public BankAccount bankAccount() {
        if (_bankAccount == null)
            _bankAccount = new BankAccount(this, Keys.FK_TRANSACTION_BANK_ACCOUNT);

        return _bankAccount;
    }

    @Override
    public Transaction as(String alias) {
        return new Transaction(DSL.name(alias), this);
    }

    @Override
    public Transaction as(Name alias) {
        return new Transaction(alias, this);
    }

    @Override
    public Transaction as(Table<?> alias) {
        return new Transaction(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(String name) {
        return new Transaction(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(Name name) {
        return new Transaction(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Transaction rename(Table<?> name) {
        return new Transaction(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Long, Long, Long, Long, Long, BigDecimal, LocalDate, String, String> fieldsRow() {
        return (Row9) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function9<? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super BigDecimal, ? super LocalDate, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function9<? super Long, ? super Long, ? super Long, ? super Long, ? super Long, ? super BigDecimal, ? super LocalDate, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
