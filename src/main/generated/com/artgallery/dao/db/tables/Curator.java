/*
 * This file is generated by jOOQ.
 */
package com.artgallery.dao.db.tables;


import com.artgallery.dao.db.DefaultSchema;
import com.artgallery.dao.db.Keys;
import com.artgallery.dao.db.tables.records.CuratorRecord;

import java.math.BigDecimal;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Curator extends TableImpl<CuratorRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>CURATOR</code>
     */
    public static final Curator CURATOR = new Curator();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CuratorRecord> getRecordType() {
        return CuratorRecord.class;
    }

    /**
     * The column <code>CURATOR.ID</code>.
     */
    public final TableField<CuratorRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>CURATOR.FIRST_NAME</code>.
     */
    public final TableField<CuratorRecord, String> FIRST_NAME = createField(DSL.name("FIRST_NAME"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>CURATOR.LAST_NAME</code>.
     */
    public final TableField<CuratorRecord, String> LAST_NAME = createField(DSL.name("LAST_NAME"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>CURATOR.SALARY</code>.
     */
    public final TableField<CuratorRecord, BigDecimal> SALARY = createField(DSL.name("SALARY"), SQLDataType.DECIMAL(10, 2).nullable(false), this, "");

    private Curator(Name alias, Table<CuratorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Curator(Name alias, Table<CuratorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>CURATOR</code> table reference
     */
    public Curator(String alias) {
        this(DSL.name(alias), CURATOR);
    }

    /**
     * Create an aliased <code>CURATOR</code> table reference
     */
    public Curator(Name alias) {
        this(alias, CURATOR);
    }

    /**
     * Create a <code>CURATOR</code> table reference
     */
    public Curator() {
        this(DSL.name("CURATOR"), null);
    }

    public <O extends Record> Curator(Table<O> child, ForeignKey<O, CuratorRecord> key) {
        super(child, key, CURATOR);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<CuratorRecord, Long> getIdentity() {
        return (Identity<CuratorRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CuratorRecord> getPrimaryKey() {
        return Keys.PK_CURATOR;
    }

    @Override
    public Curator as(String alias) {
        return new Curator(DSL.name(alias), this);
    }

    @Override
    public Curator as(Name alias) {
        return new Curator(alias, this);
    }

    @Override
    public Curator as(Table<?> alias) {
        return new Curator(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Curator rename(String name) {
        return new Curator(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Curator rename(Name name) {
        return new Curator(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Curator rename(Table<?> name) {
        return new Curator(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, BigDecimal> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super String, ? super String, ? super BigDecimal, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super String, ? super String, ? super BigDecimal, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
