/*
 * This file is generated by jOOQ.
 */
package com.artgallery.dao.db.tables;


import com.artgallery.dao.db.DefaultSchema;
import com.artgallery.dao.db.Keys;
import com.artgallery.dao.db.tables.records.PaintingRecord;

import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Painting extends TableImpl<PaintingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>PAINTING</code>
     */
    public static final Painting PAINTING = new Painting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PaintingRecord> getRecordType() {
        return PaintingRecord.class;
    }

    /**
     * The column <code>PAINTING.ID</code>.
     */
    public final TableField<PaintingRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>PAINTING.TITLE</code>.
     */
    public final TableField<PaintingRecord, String> TITLE = createField(DSL.name("TITLE"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>PAINTING.year</code>.
     */
    public final TableField<PaintingRecord, Long> YEAR = createField(DSL.name("year"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>PAINTING.MOVEMENT</code>.
     */
    public final TableField<PaintingRecord, String> MOVEMENT = createField(DSL.name("MOVEMENT"), SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>PAINTING.STATUS</code>.
     */
    public final TableField<PaintingRecord, String> STATUS = createField(DSL.name("STATUS"), SQLDataType.CLOB.nullable(false), this, "");

    private Painting(Name alias, Table<PaintingRecord> aliased) {
        this(alias, aliased, null);
    }

    private Painting(Name alias, Table<PaintingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>PAINTING</code> table reference
     */
    public Painting(String alias) {
        this(DSL.name(alias), PAINTING);
    }

    /**
     * Create an aliased <code>PAINTING</code> table reference
     */
    public Painting(Name alias) {
        this(alias, PAINTING);
    }

    /**
     * Create a <code>PAINTING</code> table reference
     */
    public Painting() {
        this(DSL.name("PAINTING"), null);
    }

    public <O extends Record> Painting(Table<O> child, ForeignKey<O, PaintingRecord> key) {
        super(child, key, PAINTING);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<PaintingRecord, Long> getIdentity() {
        return (Identity<PaintingRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<PaintingRecord> getPrimaryKey() {
        return Keys.PK_PAINTING;
    }

    @Override
    public Painting as(String alias) {
        return new Painting(DSL.name(alias), this);
    }

    @Override
    public Painting as(Name alias) {
        return new Painting(alias, this);
    }

    @Override
    public Painting as(Table<?> alias) {
        return new Painting(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Painting rename(String name) {
        return new Painting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Painting rename(Name name) {
        return new Painting(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Painting rename(Table<?> name) {
        return new Painting(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, String, Long, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super Long, ? super String, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super Long, ? super String, ? super Long, ? super String, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
