/*
 * This file is generated by jOOQ.
 */
package com.artgallery.dao.db.tables;


import com.artgallery.dao.db.DefaultSchema;
import com.artgallery.dao.db.Keys;
import com.artgallery.dao.db.tables.records.CollectionEntryRecord;

import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CollectionEntry extends TableImpl<CollectionEntryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>COLLECTION_ENTRY</code>
     */
    public static final CollectionEntry COLLECTION_ENTRY = new CollectionEntry();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CollectionEntryRecord> getRecordType() {
        return CollectionEntryRecord.class;
    }

    /**
     * The column <code>COLLECTION_ENTRY.ID</code>.
     */
    public final TableField<CollectionEntryRecord, Long> ID = createField(DSL.name("ID"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>COLLECTION_ENTRY.PAINTING_ID</code>.
     */
    public final TableField<CollectionEntryRecord, Long> PAINTING_ID = createField(DSL.name("PAINTING_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>COLLECTION_ENTRY.AUTHOR_ID</code>.
     */
    public final TableField<CollectionEntryRecord, Long> AUTHOR_ID = createField(DSL.name("AUTHOR_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>COLLECTION_ENTRY.CURATOR_ID</code>.
     */
    public final TableField<CollectionEntryRecord, Long> CURATOR_ID = createField(DSL.name("CURATOR_ID"), SQLDataType.BIGINT.nullable(false), this, "");

    private CollectionEntry(Name alias, Table<CollectionEntryRecord> aliased) {
        this(alias, aliased, null);
    }

    private CollectionEntry(Name alias, Table<CollectionEntryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>COLLECTION_ENTRY</code> table reference
     */
    public CollectionEntry(String alias) {
        this(DSL.name(alias), COLLECTION_ENTRY);
    }

    /**
     * Create an aliased <code>COLLECTION_ENTRY</code> table reference
     */
    public CollectionEntry(Name alias) {
        this(alias, COLLECTION_ENTRY);
    }

    /**
     * Create a <code>COLLECTION_ENTRY</code> table reference
     */
    public CollectionEntry() {
        this(DSL.name("COLLECTION_ENTRY"), null);
    }

    public <O extends Record> CollectionEntry(Table<O> child, ForeignKey<O, CollectionEntryRecord> key) {
        super(child, key, COLLECTION_ENTRY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public Identity<CollectionEntryRecord, Long> getIdentity() {
        return (Identity<CollectionEntryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CollectionEntryRecord> getPrimaryKey() {
        return Keys.PK_COLLECTION_ENTRY;
    }

    @Override
    public List<ForeignKey<CollectionEntryRecord, ?>> getReferences() {
        return Arrays.asList(Keys.FK_COLLECTION_PAINTING, Keys.FK_COLLECTION_AUTHOR, Keys.FK_COLLECTION_CURATOR);
    }

    private transient Painting _painting;
    private transient Author _author;
    private transient Curator _curator;

    /**
     * Get the implicit join path to the <code>PUBLIC.PAINTING</code> table.
     */
    public Painting painting() {
        if (_painting == null)
            _painting = new Painting(this, Keys.FK_COLLECTION_PAINTING);

        return _painting;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.AUTHOR</code> table.
     */
    public Author author() {
        if (_author == null)
            _author = new Author(this, Keys.FK_COLLECTION_AUTHOR);

        return _author;
    }

    /**
     * Get the implicit join path to the <code>PUBLIC.CURATOR</code> table.
     */
    public Curator curator() {
        if (_curator == null)
            _curator = new Curator(this, Keys.FK_COLLECTION_CURATOR);

        return _curator;
    }

    @Override
    public CollectionEntry as(String alias) {
        return new CollectionEntry(DSL.name(alias), this);
    }

    @Override
    public CollectionEntry as(Name alias) {
        return new CollectionEntry(alias, this);
    }

    @Override
    public CollectionEntry as(Table<?> alias) {
        return new CollectionEntry(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public CollectionEntry rename(String name) {
        return new CollectionEntry(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CollectionEntry rename(Name name) {
        return new CollectionEntry(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public CollectionEntry rename(Table<?> name) {
        return new CollectionEntry(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, Long, Long, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Long, ? super Long, ? super Long, ? super Long, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
