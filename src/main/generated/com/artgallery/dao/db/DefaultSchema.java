/*
 * This file is generated by jOOQ.
 */
package com.artgallery.dao.db;


import com.artgallery.dao.db.tables.Author;
import com.artgallery.dao.db.tables.BankAccount;
import com.artgallery.dao.db.tables.Client;
import com.artgallery.dao.db.tables.Curator;
import com.artgallery.dao.db.tables.Painting;
import com.artgallery.dao.db.tables.Transaction;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.17.8"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DefaultSchema extends SchemaImpl {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>DEFAULT_SCHEMA</code>
     */
    public static final DefaultSchema DEFAULT_SCHEMA = new DefaultSchema();

    /**
     * The table <code>AUTHOR</code>.
     */
    public final Author AUTHOR = Author.AUTHOR;

    /**
     * The table <code>BANK_ACCOUNT</code>.
     */
    public final BankAccount BANK_ACCOUNT = BankAccount.BANK_ACCOUNT;

    /**
     * The table <code>CLIENT</code>.
     */
    public final Client CLIENT = Client.CLIENT;

    /**
     * The table <code>CURATOR</code>.
     */
    public final Curator CURATOR = Curator.CURATOR;

    /**
     * The table <code>PAINTING</code>.
     */
    public final Painting PAINTING = Painting.PAINTING;

    /**
     * The table <code>TRANSACTION</code>.
     */
    public final Transaction TRANSACTION = Transaction.TRANSACTION;

    /**
     * No further instances allowed
     */
    private DefaultSchema() {
        super("", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.asList(
            Author.AUTHOR,
            BankAccount.BANK_ACCOUNT,
            Client.CLIENT,
            Curator.CURATOR,
            Painting.PAINTING,
            Transaction.TRANSACTION
        );
    }
}
